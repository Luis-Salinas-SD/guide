<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on My New Hugo Site</title>
    <link>https://luis-salinas-sd.github.io/guide/javascript/</link>
    <description>Recent content in Javascript on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://luis-salinas-sd.github.io/guide/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bases</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-1/</guid>
      <description>Bases de Javascript Bienvenido a una breve explicación sobre lo basico para entender JavaScript Variables y Constantes  Las variables son espacios de memoria reservados para un valor, este puede ser reasignalble, se pueden declarar con &amp;ldquo;var&amp;rdquo; ó &amp;ldquo;let&amp;rdquo;.
let nombre = &amp;quot;Luis&amp;quot;; var apellido = prompt(&#39;¿Cual es su apellido?&#39;); Las constantes son espacios de memoria pero el valor no puede ser reasignado.(tambien son variables).
const pi = 3.1416; Números y Operadores Operaciones aritmeticas basicas.</description>
    </item>
    
    <item>
      <title>Condicionales</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-2/</guid>
      <description>Condicional if Si la primer condicion se cumple, la siguiente no se ejecuta, pero si la primera condición no se cumple se ejecuta la segunda en el if(){}else{}
 condicion if  if(24 === 24 || &amp;quot;hola&amp;quot; === &amp;quot;hola&amp;quot;){ alert(true); }else{ alert(false); } //true  condicion if( ){ }else{ }  //! Condicional if()else let nota = 10; if (nota &amp;lt;= 7) { console.log(&amp;quot;malo&amp;quot;); }else if (nota == 8) { console.</description>
    </item>
    
    <item>
      <title>Ciclos</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-3/</guid>
      <description>Ciclos  Ciclo FOR imprime una serie del 1 al 10  for (var i = 1; i &amp;lt;= 15; i++) { alert(i); }  imprime los multiplos de 7  for (let i = 0; i &amp;lt; 50; i++) { if ((i % 7) === 0) { console.log(i); } } uso de continue
 continue = ignora la sentencia no imprimir los multiplos de 7  for (let i = 0; i &amp;lt; 50; i++) { if ((i % 7) === 0) { continue console.</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-4/</guid>
      <description>Funciones  La definición de una función (también llamada declaración de función o sentencia de función) consiste de la palabra clave (reservada) function, seguida por:  El nombre de la función (opcional). Una lista de argumentos para la función, encerrados entre paréntesis y separados por comas (,). Las sentencias JavaScript que definen la función, encerradas por llaves, { }.   Ejemplo:  function cuadrado(number) { return number * number; } funciones declarativas y anonimas Funciones Declarativas:  En las funciones declarativas, utilizamos la palabra reservada function al inicio para poder declarar la función:  function saludar(nombre) { console.</description>
    </item>
    
    <item>
      <title>Arrow-Function</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-5/</guid>
      <description>Funciones Flecha Una expresión de función flecha es una alternativa compacta a una expresión de función tradicional, pero es limitada y no se puede utilizar en todas las situaciones.
 Funcion convencional:  function suma(a, b) { return a + b; } console.log(suma(5, 5));  Arrow-function  suma = (a, b) =&amp;gt; a + b console.log(suma(5, 5)); //10 La sintaxis básica de una arrow-function es la siguiente:
nombre_function = (parametros) =&amp;gt; {cuerpo_funcion} Ejemplos: imprimir los numeros en pantalla hasta el numero que el usuario teclea</description>
    </item>
    
    <item>
      <title>Scope</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-6/</guid>
      <description>Funciones Flecha Una expresión de función flecha es una alternativa compacta a una expresión de función tradicional, pero es limitada y no se puede utilizar en todas las situaciones.
 Funcion convencional:  function suma(a, b) { return a + b; } console.log(suma(5, 5));  Arrow-function  suma = (a, b) =&amp;gt; a + b console.log(suma(5, 5)); //10 La sintaxis básica de una arrow-function es la siguiente:
nombre_function = (parametros) =&amp;gt; {cuerpo_funcion} Ejemplos: imprimir los numeros en pantalla hasta el numero que el usuario teclea</description>
    </item>
    
    <item>
      <title>Contesto This</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-7/</guid>
      <description>Funciones Flecha Una expresión de función flecha es una alternativa compacta a una expresión de función tradicional, pero es limitada y no se puede utilizar en todas las situaciones.
 Funcion convencional:  function suma(a, b) { return a + b; } console.log(suma(5, 5));  Arrow-function  suma = (a, b) =&amp;gt; a + b console.log(suma(5, 5)); //10 La sintaxis básica de una arrow-function es la siguiente:
nombre_function = (parametros) =&amp;gt; {cuerpo_funcion} Ejemplos: imprimir los numeros en pantalla hasta el numero que el usuario teclea</description>
    </item>
    
    <item>
      <title>Arreglos</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-8/</guid>
      <description>Funciones Flecha Una expresión de función flecha es una alternativa compacta a una expresión de función tradicional, pero es limitada y no se puede utilizar en todas las situaciones.
 Funcion convencional:  function suma(a, b) { return a + b; } console.log(suma(5, 5));  Arrow-function  suma = (a, b) =&amp;gt; a + b console.log(suma(5, 5)); //10 La sintaxis básica de una arrow-function es la siguiente:
nombre_function = (parametros) =&amp;gt; {cuerpo_funcion} Ejemplos: imprimir los numeros en pantalla hasta el numero que el usuario teclea</description>
    </item>
    
  </channel>
</rss>
