<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on My New Hugo Site</title>
    <link>https://luis-salinas-sd.github.io/guide/javascript/</link>
    <description>Recent content in Javascript on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://luis-salinas-sd.github.io/guide/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bases</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-1/</guid>
      <description>Bases de Javascript Bienvenido a una breve explicación sobre lo basico para entender JavaScript Variables y Constantes  Las variables son espacios de memoria reservados para un valor, este puede ser reasignalble, se pueden declarar con &amp;ldquo;var&amp;rdquo; ó &amp;ldquo;let&amp;rdquo;.
let nombre = &amp;quot;Luis&amp;quot;; var apellido = prompt(&#39;¿Cual es su apellido?&#39;); Las constantes son espacios de memoria pero el valor no puede ser reasignado.(tambien son variables).
const pi = 3.1416; Números y Operadores Operaciones aritmeticas basicas.</description>
    </item>
    
    <item>
      <title>Condicionales</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-2/</guid>
      <description>Condicional if Si la primer condicion se cumple, la siguiente no se ejecuta, pero si la primera condición no se cumple se ejecuta la segunda en el if(){}else{}
 condicion if  if(24 === 24 || &amp;quot;hola&amp;quot; === &amp;quot;hola&amp;quot;){ alert(true); }else{ alert(false); } //true  condicion if( ){ }else{ }  //! Condicional if()else let nota = 10; if (nota &amp;lt;= 7) { console.log(&amp;quot;malo&amp;quot;); }else if (nota == 8) { console.</description>
    </item>
    
    <item>
      <title>Ciclos</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-3/</guid>
      <description>Ciclos  Ciclo FOR imprime una serie del 1 al 10  for (var i = 1; i &amp;lt;= 15; i++) { alert(i); }  imprime los multiplos de 7  for (let i = 0; i &amp;lt; 50; i++) { if ((i % 7) === 0) { console.log(i); } } uso de continue
 continue = ignora la sentencia no imprimir los multiplos de 7  for (let i = 0; i &amp;lt; 50; i++) { if ((i % 7) === 0) { continue console.</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-4/</guid>
      <description>Funciones  La definición de una función (también llamada declaración de función o sentencia de función) consiste de la palabra clave (reservada) function, seguida por:  El nombre de la función (opcional). Una lista de argumentos para la función, encerrados entre paréntesis y separados por comas (,). Las sentencias JavaScript que definen la función, encerradas por llaves, { }.   Ejemplo:  function cuadrado(number) { return number * number; } funciones declarativas y anonimas Funciones Declarativas:  En las funciones declarativas, utilizamos la palabra reservada function al inicio para poder declarar la función:  function saludar(nombre) { console.</description>
    </item>
    
    <item>
      <title>Arrow-Function</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-5/</guid>
      <description>Funciones Flecha Una expresión de función flecha es una alternativa compacta a una expresión de función tradicional, pero es limitada y no se puede utilizar en todas las situaciones.
 Funcion convencional:  function suma(a, b) { return a + b; } console.log(suma(5, 5));  Arrow-function  suma = (a, b) =&amp;gt; a + b console.log(suma(5, 5)); //10 La sintaxis básica de una arrow-function es la siguiente:
nombre_function = (parametros) =&amp;gt; {cuerpo_funcion} Ejemplos: imprimir los numeros en pantalla hasta el numero que el usuario teclea</description>
    </item>
    
    <item>
      <title>Scope</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-6/</guid>
      <description>Scope El scoupe es una colección de variables, funiones y objetos al alacnce del codigo.
exiten dos tipos:
  Global scoupe [variables globales] Las variables globales se pueden mandar a llamar en cualquier parte del programas.
  local scoupe [Variables locales] Adiferencia de las globales, las locales solo se pueden declarar en la funciones y pueden ser mandadas a llamar en la misma.
  var nombre = &amp;quot;Luis&amp;quot;;//scoupe global function hola() { alert(&amp;quot;hola &amp;quot; + nombre); }hola(); function adios(){ let nombre = &amp;quot;Ana&amp;quot;; //scoupe local alert(&amp;quot;adios &amp;quot; + nombre); }adios();  CONST: Es una constante la cual NO cambiara su valor en ningún momento en el futuro.</description>
    </item>
    
    <item>
      <title>Arreglos</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-7/</guid>
      <description>Arreglos Los arrays son objetos similares a una lista cuyo prototipo proporciona métodos para efectuar operaciones de recorrido y de mutación. Tanto la longitud como el tipo de los elementos de un array son variables.
 Declaración:  let arreglo = [&amp;quot;hola&amp;quot;, 1, true, {}];  Declración de un arreglo y recorrerlo con un for  let arreglo = [5, 9, 6]; for (let i = 0; i &amp;lt; arreglo.length; i++) { const elemento = arreglo[i]; console.</description>
    </item>
    
    <item>
      <title>Objetos - JSON</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-8/</guid>
      <description>Objetos - JSON Declaración de un objeto JSON
Puede recibir diferentes valores como:
 arreglos objetos funciones (metodos) booleans enteros strings  let video = { titulo: &amp;quot;piloto&amp;quot;, duración: 2, formato: &amp;quot;avi&amp;quot;, //!arreglo arreglo: [&amp;quot;uno&amp;quot;, &amp;quot;dos&amp;quot;, &amp;quot;tres&amp;quot;], //!metodo inscribir: function (usuario) { console.log(usuario + &amp;quot; Esta inscrito&amp;quot;); } }  Dentro de una objeto las variables son llamada propiedades o atributos.
  Dentro de un objeto las funciones son llamadas metodos.</description>
    </item>
    
    <item>
      <title>Funcion constructora</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-9/</guid>
      <description>Función Constructura A continuación se muestra una función constructora de objetos, viendo asi cómo podemos construir un objeto o varios a traves de una función.
 Es importante mencionar que en una función constructora el metodo de esta debe de iniciar con this.nombre_metodo.
  Función Constructora:  function Curso(titulo, duracion, formato) { //! Propiedades/Atributos this.titulo = titulo; this.duracion = duracion; this.formato = formato; //! Metodo this.inscribir = function (usuario) { console.</description>
    </item>
    
    <item>
      <title>Clases</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-10/</guid>
      <description>Clases Las clases de javascript, introducidas en ECMAScript 2015, son una mejora sintáctica sobre la herencia basada en prototipos de JavaScript. La sintaxis de las clases no introduce un nuevo modelo de herencia orientada a objetos en JavaScript. Las clases de JavaScript proveen una sintaxis mucho más clara y simple para crear objetos y lidiar con la herencia.
 Las clases son un modelo a seguir Un objeto es una instancia de una clase Los atributos son las caracateristicas o propiedades de objetos Los métodos son acciónes (funciones) que un objeto puede realizar  Declaración de una clase  Las clases no reciben parametros.</description>
    </item>
    
    <item>
      <title>Clases 2.0</title>
      <link>https://luis-salinas-sd.github.io/guide/javascript/page-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luis-salinas-sd.github.io/guide/javascript/page-11/</guid>
      <description>Clases Las clases de javascript, introducidas en ECMAScript 2015, son una mejora sintáctica sobre la herencia basada en prototipos de JavaScript. La sintaxis de las clases no introduce un nuevo modelo de herencia orientada a objetos en JavaScript. Las clases de JavaScript proveen una sintaxis mucho más clara y simple para crear objetos y lidiar con la herencia.
 Las clases son un modelo a seguir Un objeto es una instancia de una clase Los atributos son las caracateristicas o propiedades de objetos Los métodos son acciónes (funciones) que un objeto puede realizar  Declaración de una clase  Las clases no reciben parametros.</description>
    </item>
    
  </channel>
</rss>
